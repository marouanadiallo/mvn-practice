<!-- One way: Enable debug mode for Logback configuration (Troubleshooting configuration) -->
<!-- scan="true" enables automatic reloading of the configuration file when it changes while an application is running -->
<configuration debug="false" scan="true" scanPeriod="30 seconds">
    <!-- Second way: Enable the console status listener for Logback (Troubleshooting configuration)
    <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener"/> -->

    <!-- Variable substitution -->
    <!-- Defne variables inside the configuration script or externally. It can be used anywhere in the configuration -->
    <property name="LOG_HOME" value="/var/logs/application" />

    <!-- configuring logger levels from a Properties file -->
    <!-- <variable resource="application.properties" /> this is the same as property -->
    <property resource="application.properties" />

    <!--
        Loggers pass LoggingEvents to Appenders. Appenders do the actual work of logging.
        We usually think of logging as something that goes to a file or the console, but Logback is capable of much more.
        Logback-core provides several useful appenders.
     -->


    <!-- Despite its name, ConsoleAppender appends messages to System.out or System.err -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoders are assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
        <!-- Layout is a synonym for encoder -->
        <!-- Layout formats the log message -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{20} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--
        FileAppender writes to a file. It is the most basic appender.
        The file name is specified by the file property.
        The file property can be set to a relative or absolute path.
     -->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>utils.log</file>
        <append>true</append> <!-- append to an existing file rather than truncating it -->
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--
        Often, appending log messages to the same file is not the behavior we need. We want files to “roll” based on time, log file size, or a combination of both.

        RollingFileAppender is a subclass of FileAppender that rolls over the log file at a given interval or when it reaches a certain size.
        The rolling policy is specified by the rollingPolicy property.
        The rollingPolicy property can be set to a relative or absolute path.
     -->
    <appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>application.log</file>
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>application.%d{yyyy-MM-dd}.gz</fileNamePattern>
            <maxHistory>30</maxHistory> <!-- keep 30 days of history -->
            <totalSizeCap>1GB</totalSizeCap> <!-- total size of all archived log files -->
        </rollingPolicy>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>

    <logger name="com.alphamar.pm.services" level="${logger.com.alphamar.pm.service}" />
    <!-- Setting additivity to false disable the default behavior. Utils won’t log to the console, and neither will any of its descendants. -->
    <logger name="com.alphamar.pm.utils" level="${logger.com.alphamar.pm.utils}" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </logger>

    <root level="${root.level}">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="ROLLING" />
    </root>
</configuration>